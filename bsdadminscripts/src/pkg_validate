#!/bin/sh -f
#
# Copyright (c) 2007-2009
# Dominic Fandrey <kamikaze@bsdforen.de>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

readonly name=pkg_validate
readonly version=1.5.1

# Use line break as delimiter for lists.
IFS='
'

#
# Prints the header for the invalid packages table.
#
# @param amount_width
#	The space required to print amount, at least 4.
# @param package_width
#	The space reserved to print the package name.
# @param delimiter
#	The column seperator.
# @param header_sent
#	Will be set to 1.
#
printHeader() {
	header_sent=1
	printf \
		"%${amount_width}s$delimiter%${amount_width}s$delimiter" \
		"csum" "miss"
	printf \
		"%-${package_width}s$delimiter%s\n" \
		"package" "origin"
}

#
# Validates a package and prints information about failed packages.
#
# @param count
#	The number of the current package.
# @param amount
#	The overall number of packages.
# @param damaged
#	The number of damaged packages so far.
# @param amount_width
#	The space required to print amount, at least 4.
# @param package_width
#	The space reserved to print the package name.
# @param delimiter
#	The column seperator.
# @param package
#	The name of the current package.
# @param origin
#	The origin of the current package.
# @param header_sent
#	The next damaged package will cause a header print if this is set to 0.
# @param length
#	The length of the previous status message.
# @param print_raw
#	If set column padding will not occur.
# @param print_clean
#	If set status messages will not be printed.
#
validatePkg() {
	# Print the currently validating package.
	if [ -z "$print_clean" ]; then
		current="validating $count of $amount: $package"
		printf "%-${length}s\\r" "$current" > /dev/tty
		length=${#current}
	fi

	# Count checksum missmatches and missing files.
	csum_count=0
	miss_count=0
	lines="$(pkg_info -gq "$package" 2>&1)"
	abort $?
	for line in $lines; {
		if echo "$line" | grep -E 'checksum$' > /dev/null; then
			csum_count=$(($csum_count + 1))
			abort $?
		else
			miss_count=$(($miss_count + 1))
			abort $?
		fi
	}

	# Print the amount of mismatches if any occured.
	if [ $csum_count -gt 0 -o $miss_count -gt 0 ]; then
		test -z "$print_clean" && printf "\r%-${length}s\r" > /dev/tty
		length=0
		test "$header_sent" -eq "0" && printHeader
		if [ "$print_raw" -eq "0" ]; then
			printf "%${amount_width}s$delimiter%${amount_width}s" \
				"$csum_count" "$miss_count"
			printf "$delimiter%-${package_width}s$delimiter%s\n" \
				"$package" "$origin"
		else
			printf "%d$delimiter%d$delimiter" \
				"$csum_count" "$miss_count"
			printf "%s$delimiter%s\n" \
				"$package" "$origin"
		fi
		damaged="$(("$damaged" + 1))"
		abort $?
	fi
}

#
# Display a short help message.
#
printHelp() {
	echo "$name v$version
usage:	$name [-a] [-c] [-G] [-x] [-X] [-r] [-d] [-h] [packages]"
	exit 0
}

#
# Print an abort message and exit.
#
abort() {
	if [ "$1" -ne 0 ]; then
		test -z "$print_clean" && printf "\\r%-${length}s\\n" \
			"Apparently interrupted by user. Exiting." > /dev/tty
		exit "$1"
	fi
}

#
# Parses the given parameters.
#
# @param request_pkgs
#	The parameters to pkg_info to determine the packages to work on.
# @param validate_all
#	Is set to 0 as soon as valid package definitions for pkg_info
#	are encountered.
# @param delimiter
#	The column seperator.
# @param print_raw
#	Is set to 1 if raw printing is requested.
# @param header_sent
#	Is set to 1 if raw printing is requested.
# @param print_clean
#	If set status messages will not be printed.
#
readParams() {
	local option
	for option {
		case "$param" in
			"delimiter")
				delimiter="$option"
				param=
				continue
			;;
		esac
		case "$option" in
			"-a" | "--all")
				request_pkgs="$request_pkgs${request_pkgs:+$IFS}-a"
				validate_all=0
			;;
			"-c" | "--clean")
				print_clean=1
			;;
			"-G" | "--no-glob-pattern")
				request_pkgs="$request_pkgs${request_pkgs:+$IFS}-G"
			;;
			"-x" | "--regex")
				request_pkgs="$request_pkgs${request_pkgs:+$IFS}-x"
			;;
			"-X" | "--extended-regex")
				request_pkgs="$request_pkgs${request_pkgs:+$IFS}-X"
			;;
			"-r" | "--raw-print")
				print_raw=1
				header_sent=1
			;;
			"-d" | "--delimiter")
				param=delimiter
			;;
			"-h" | "--help")
				printHelp
			;;
			-d*)
				param=delimiter
				readParams "${option#-d}"
			;;
			--delimiter*)
				param=delimiter
				readParams "${option#--delimiter}"
			;;
			-? | --*)
				echo "Unknown paramter \"$option\"."
				exit 1
			;;
			-*)
				# Split parameters.
				parameter=$(echo "$option" | head -c 2)
				readParams "$parameter"
				readParams "-${option#-?}"
			;;
			*)
				request_pkgs="$request_pkgs
$option"
				validate_all=0
			;;
		esac
	}
}

print_raw=0
header_sent=0
delimiter=" "
request_pkgs=
validate_all=1
readParams "$@"

# Only allow multibyte delimiters in raw mode to protect the output format.
test $print_raw -eq 0 && delimiter="$(echo "$delimiter" | head -c 1)"

test "$validate_all" -eq 1 && request_pkgs='-a'

amount=$(pkg_info -E $request_pkgs | wc -l | sed -E 's/[[:space:]]+//g')
abort $?
amount_width=${#amount}
package_width="$((41 - 2 * $amount_width))"
abort $?
test "$amount_width" -lt 4 && amount_width=4
count=0
damaged=0
length=0
packages="$(pkg_info -E $request_pkgs)"
abort $?
for package in $packages; {
	origin="$(pkg_info -qo "$package")"
	abort $?
	count=$(($count + 1))
	abort $?
	validatePkg
}

test -z "$print_clean" && printf "\r%-${length}s\r" > /dev/tty 
test "$print_raw" -eq "0" \
	&& echo "$damaged of $count packages appear to be damaged."


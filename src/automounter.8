.\"
.\" Copyright (c) 2008 - 2013
.\" Dominic Fandrey <kamikaze@bsdforen.de>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd 2 September 2013
.Dt AUTOMOUNTER 8
.Os
.Sh NAME
.Nm automounter
.Nd Dynamically configure amd for existing devices.
.Sh SYNOPSIS
.Nm
.Pq Ar start | Ar update | Ar list | Ar mlist | Ar monitor | Ar stop
.Nm
.Ar list
.Op Ar mounted | Ar labels | Ar keys | Ar encrypted
.Nm
.Ar mlist
.Op Ar mounted | Ar llinks | Ar dlinks
.Nm
.Ar monitor
.Op Ar interval
.Sh DESCRIPTION
The
.Nm
script dynamically builds a map file for
.Xr amd 8 .
It is meant to be started by the
.Xr rc 8
system and triggered by
.Xr devd 8
when devices appear or disappear.
.Pp
By default
.Nm
copies the file %%MAP%% and builds its configuration on top of that.
This means it inherits everything defined there and amd_enable="YES" should
.Ar not
be set in
.Xr rc.conf 5 .
.Pp
The script also supports polling the keys of
.Xr geli 8
encrypted partitions and images from managed media.
More information is available in the
.Sx GELI
section of this manual page.
.Pp
This manual page describes how to set up
.Nm .
How to adjust its behaviour is described in the
.Xr automounter.conf 5
manual page.
.Sh COMMANDS
The following commands are available:
.Bl -tag -width indent
.It Ar start
Starts
.Xr amd 8
and calls update.
.It Ar update
Updates the dynamic map file for
.Xr amd 8
and creates the necessary mount points and links. It also removes stale
mount points and links.
.It Ar list
Lists the labels of currently managed mounts, the keys found on the media and
the encrypted providers that are available.
.It Ar list mounted
Lists the currently mounted labels.
.It Ar list labels
List currently available labels.
.It Ar list keys
Lists the keys that were found on the managed media.
.It Ar list encrypted
Lists the encrypted images and devices that are available. If attached, the
media that contains the key will also be listed.
.It Ar mlist
List data in a machine readable form as newline separated absolute path names.
.It Ar mlist mounted
List the paths of mounted file systems.
.It Ar mlist llinks
List label named links to file systems.
.It Ar mlist dlinks
List device named links to file systems.
.It Ar monitor
Provides a
.Xr top 1
like display of the available labels, keys and encrypted images and devices.
.It Ar monitor Ar interval
Refresh the monitor display at the given interval in seconds, defaults to two
seconds if omitted.
.It Ar stop
Unmount everything, stop
.Xr amd 8
and clean everything up.
.El
.Pp
Unsupported parameters will cause printing of supported parameters.
.Sh NOTES
Automounter is made for the sake of comfort. Even though it reduces the
probability of panics, the user is still obliged to run
.Xr mount 8
to make sure a device is not mounted, before unplugging it.
.Pp
.Fx 7.1 and higher normally do no longer panic when a mounted device
disappears and
.Nm
handles this case gracefully, however it still remains
.Dq bad style
to unplug mounted media and might leave your file system in an inconsistent
state.
.Sh IMPLEMENTATION NOTES
This manual section is for the technically interested, to setup
.Nm
skip ahead to
.Sx STARTUP .
.Pp
.Nm
is not a daemon, instead it relies on
.Xr amd 8
to perform the daemonic task of dynamically mounting file systems.
.Pp
The purpose of
.Nm
is to discover mountable file systems and create an
.Xr amd 8
map file. This also entails recording discoveries, creating a link structure
in %%MEDIA%% and not loosing any devices during operation, which is the
most difficult task of all.
.Ss States Of Operation
.Nm
knows two states of operation, stopped and started. This is necessary to
ensure that the system has been initialized before starting. The start
call is performed by the
.Xr rc 8
system, which causes
.Nm
to start
.Xr amd 8 ,
perform the first update and discover available file systems.
.Pp
If properly configured premature update calls might be issued by
.Xr devd 8
during boot. These will be ignored.
.Ss Device Discovery
The first activity during an update call is device discovery. The entire
configuration is rebuilt every time an update is called. To this
end detector functions are called. The current detector functions are
named
.Fn mountedDetect ,
.Fn iso9660Detect ,
.Fn glabelDetect
and
.Fn probeDetect .
Each of these functions calls the
.Fn writeNode
function to record its
discoveries and set up the necessary directory and link structure. The
.Fn writeNode
function also performs the blacklisting checks. The detectors keep
a list of already probed devices, to avoid redundant work.
.Pp
The mounted detector discovers the currently mounted devices. This is
necessary, because mounting a glabel consumer destroys the glabel providers
and thus prevents discovery by the glabel detector.
The probe detector needs to be able to mount file systems, which does
not work with already mounted geom providers, so it depends on this, too.
.Pp
The iso9660 detector simply assumes that devices conforming to certain name
patterns are optical disk drives. This behaviour prevents detection failure
if a drive does not hold a disk. The device pattern can be changed in the
.Xr automounter.conf 5
file.
.Pp
The glabel detector uses the
.Xr geom 8
label class to identify file system types through labels. This is the
traditional way of discovery for
.Nm .
.Pp
The probe detector takes the remaining geom providers reported by the
.Xr gstat 8
tool and simply tries to mount them as different file system types until
it succeeds or runs out of file system types. Successfully mounted
devices are unmounted and setup with
.Fn writeNode .
.Pp
Afterwards the mount detector is called again to catch mounts that
occured after the first run and prevented detection through the other
detectors. This is a very unlikely case, but not entirely impossible.
.Ss Stale Mounts
The next step is to compare the list of previously discovered devices
and destroy the %%MEDIA%% link structure for each one that was not
discovered this time.
.Ss Revisits
Completing the removal of stale media, detectors which requested it during
the first run are revisited. This allows them to follow label changes of a
device after the old media links have been removed.
.Ss Encrypted Providers
Afterwards, if activated, the
.Xr geli 8
managing function is started.
.Pp
The
.Fn geliUpdate
function checks whether it is currently managing keys
residing on no longer present file systems. The keys are removed from the
list of available keys.
.Pp
The next step is to search newly discovered file systems for keys.
.Pp
Afterwards a process for each encrypted file system whose key is no longer
available is forked off. This process tries to destroy the
.Xr geli 8
provider, which is only possible if the file system is not mounted. Otherwise
the process stays around until it has managed to destroy the provider or
until the key becomes available again. After successful destruction of the
provider the process starts a new update to ensure that keys provided by the
destroyed provider are no longer listed as available.
.Pp
The last step is to decrypt the providers for which new keys are available.
This results in the creation of new geoms, which are picked up by
.Xr devd 8 ,
resulting in a new update call.
.Ss Reconfiguring AMD
Now that the device discovery is completed,
.Xr amd 8
is sent SIGHUP to reload the newly built map file. From this moment on the
discovered devices are available.
.Ss Locking
Because the sequential order of events is critical to retain consistency
most of the operation of automounter is locked. I.e. start,
update, stop, mount and umount are synchronous operations.
.Pp
Mounts and umounts, because they may not occur during device discovery,
the others, because update runs may only occur one at a time. The locking
ensures that too many updates at once (e.g. lots of diconnect/connect events
reported by
.Xr devd 8
or the removal of several encrypted providers) will be called sequentially
or time out at a time when it can be assumed safely, that the discoveries
were already made by previous updates.
.Ss Mounting and Unmounting
The
.Xr amd 8
map file is created so that file systems are mounted and unmounted through
.Nm .
This has several advantages, the first of which is that
.Xr amd 8
cannot deal with spaces in
.Xr mount 8
and
.Xr umount 8
parameters. To permit human readable mount directories, the mount and umount
commands are called with a hash, which automounter than interprets as one of
its managed file systems.
.Pp
The second advantage is that
.Nm
can thus intercept mounts and umounts. This is used to enforce locked mounts
and umounts as well as preventing unmount attempts to file systems in
use, especially with the fuse hack in place. But it is also used to force
unmount file systems whose devices are no longer present and issue an update
call, because the disappearing of the device was previously missed, due to
mounted file systems being protected from disappearing.
.Pp
Finally it is used to silently fall back to read-only mode, which allows
mounting of devices with hardware write protection like SD cards or lockable
USB drives.
.Sh STARTUP
In order for the dynamic creation and destruction of mount points to work,
it is necessary that
.Nm
is started first. The recommended way to achieve this is by setting the
following line in
.Xr rc.conf 5 :
.Pp
	automounter_enable="YES"
.Pp
To start it without rebooting run the following command:
.Pp
	service automounter start
.Sh DEVICE DISCOVERY
As of
.Nm
1.4.1 it is no longer necessary to add an entry to the
.Xr devd.conf 5
file to automatically update available devices when they appear or disappear.
However, it is still necessary to restart
.Xr devd 8
after installation:
.Pp
	service devd restart
.Sh ACCESS RIGHTS
The mount point inherits the access rights of the label device node. This is
useful for file systems that don't support proper user management like msdosfs.
If any right is present for the owner, group or others the executable flag is
added to ensure that cd'ing into the file system is possible.
.Pp
If the label device node is not found, e.g. because the label is empty, the
regular device node will be used instead.
.Pp
To find out how to change the access rights to a device node and hence of the
resulting mount point read the
.Xr devfs.rules 5
manual page.
.Sh GELI
The
.Nm
script is able to poll keys for encrypted images and devices from managed media
(such as a USB drive) and create the necessary device nodes to access these
images.  Images containing labeled partitions are detected like managed media
and can even contain keys themselves. Keys and labels will simply be updated
whenever new ones show up.
.Pp
If a used key disappears the encrypted device will be detached when no longer
in use.
.Pp
To activate and configure this feature please refer to the
.Ar GELI
section of the
.Xr automounter.conf 5
manual page.
.Pp
How to create images that can be mounted with a key (password authentication
is not supported) is described in the
.Xr geli 8
manual page. Keys are expected to reside in %%GELI_KEYS%% on a labeled
partition and the images are expected to be stored in %%GELI_IMAGES%%.
.Pp
Devices have to be unresolvable symlinks from %%GELI_IMAGES%%. E.g. if you wish
to enable auto attaching for %%DEVFS%%/da0s1 with a key named confidential you
have to create a link in the following fashion:
.Bd -literal -offset indent
ln -s da0s1 "%%GELI_IMAGES%%/confidential"
.Ed
.Sh FILES
.Bl -tag -width indent
.It %%PREFIX%%/sbin/automounter
.It %%PREFIX%%/etc/automounter.conf
.It %%PREFIX%%/etc/automounter.conf.sample
.It %%PREFIX%%/etc/devd/automounter.conf
.It %%PREFIX%%/etc/rc.d/automounter
.El
.Sh EXIT CODES
Additionally to the error codes listed here,
.Nm
can return all the errors listed in the
.Xr lockf 1
manual.
.Bl -tag -width indent
.It ERR_CMD_UNKNOWN 1
Returned if started with an unknown command parameter.
.It ERR_NOT_STARTED 2
Returned if
.Nm
has not yet been started.
.It ERR_MOUNT_FS_MISSING 3
Returned by the mount command if the requested file system cannot be found.
.It ERR_UMOUNT_ACTIVE 4
Returned by the umount command if the file system to unmount is active.
.It ERR_LIST_LOCKED 5
Returned if the list command is issued during an ongoing update.
.It ERR_RPC_FAIL 6
Returned if the RPC daemon is not available and could not be started.
.It ERR_AMD_FAIL 7
Returned if the AMD daemon could not be started.
.El
.Sh BUGS/UNEXPECTED BEHAVIOUR
Fuse based file systems like ntfs-3g close all opened files when amd tries to
unmount them. This is a bug in fuse and neither automounter nor amd are to
blame. A workaround for this bug is described in the
.Xr automounter.conf 5
manual page.
.Sh COMPATIBILITY
The script has been tested on FreeBSD stable/9-r254957.
.Sh SEE ALSO
.Xr amd 8 , Xr automounter.conf 5 , Xr rc 8 , Xr rc.conf 5 , Xr devd.conf 5 ,
.Xr devfs.rules 5 , Xr geli 8 , Xr mount 8 , Xr umount 8 and Xr service 8
.Sh AUTHOR
.An Dominic Fandrey Aq kamikaze@bsdforen.de
